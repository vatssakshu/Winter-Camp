#include <iostream>
#include <vector>
using namespace std;

void computeLPSArray(string pat, vector<int> &lps)
{
    int len = 0;
    lps[0] = 0;

    int n = lps.size();
    int i = 1;
    while (i < n)
    {
        if (pat[i] == pat[len])
        {
            len++;
            lps[i] = len;
            i++;
        }
        else
        {
            if (len != 0)
                len = lps[len - 1];
            else
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}

void KMP(string pat, string txt)
{
    int M = pat.length();
    int N = txt.length();

    vector<int> lps(M);

    computeLPSArray(pat, lps);

    int i = 0;
    int j = 0;
    while ((N - i) >= (M - j))
    {
        if (pat[j] == txt[i])
        {
            j++;
            i++;
        }

        if (j == M)
        {
            cout << "\nUsing KMP " << pat << " found at index " << (i - j) << " in " << txt << "\n";
            j = lps[j - 1];
        }

        else if (i < N && pat[j] != txt[i])
        {
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
    }
}

void rabinKarp(string pat, string txt)
{
    int M = pat.length();
    int N = txt.length();
    int i, j;
    int p = 0;
    int t = 0;
    int h = 1;
    int q = INT_MAX;
    int d = 256;

    for (i = 0; i < M - 1; i++)
        h = (h * d) % q;

    for (i = 0; i < M; i++)
    {
        p = (d * p + pat[i]) % q;
        t = (d * t + txt[i]) % q;
    }

    for (i = 0; i <= N - M; i++)
    {
        if (p == t)
        {
            for (j = 0; j < M; j++)
            {
                if (txt[i + j] != pat[j])
                    break;
            }
            if (j == M)
                cout << "\nUsing Rabin Karp " << pat << " found at index " << i << " in " << txt << "\n";
        }
        if (i < N - M)
        {
            t = (d * (t - txt[i] * h) + txt[i + M]) % q;
            if (t < 0)
                t = (t + q);
        }
    }
}

int main()
{
    string txt = "ABABDABACDABABCABAB";
    string pat = "ABABCABAB";

    KMP(pat, txt);

    rabinKarp(pat, txt);

    return 0;
}
