class Node {
    int item;
    Node left, right;

    public Node(int key) {
        item = key;
        left = right = null;
    }
}

class binaryTraverse {
    Node root;

    binaryTraverse() {
        root = null;
    }

    void inOrder(Node node) {
        if (node == null) {
            return;
        }
        inOrder(node.left);
        System.out.print(node.item + "->");

        inOrder(node.right);
    }

    void PreOrder(Node node) {
        if (node == null) {
            return;
        }
        System.out.print(node.item + "->");
        PreOrder(node.left);
        PreOrder(node.right);

    }

    void PostOrder(Node node) {
        if (node == null) {
            return;
        }

        PostOrder(node.left);
        PostOrder(node.right);
        System.out.print(node.item + "->");
    }

    public static void main(String args[]) {
        binaryTraverse tree = new binaryTraverse();
        tree.root = new Node(8);
        tree.root.left = new Node(5);
        tree.root.right = new Node(13);

        tree.root.left.left = new Node(2);
        tree.root.left.right = new Node(6);
        tree.root.left.right.left = new Node(4);
        tree.root.left.right.right = new Node(7);

        tree.root.right.left = new Node(9);
        tree.root.right.right = new Node(15);

        System.out.println("In Order Traversal: ");
        tree.inOrder(tree.root);
        System.out.println();
        System.out.println("Pre Order Traversal: ");
        tree.PreOrder(tree.root);
        System.out.println();
        System.out.println("Post Order Traversal: ");
        tree.PostOrder(tree.root);
    }
}
